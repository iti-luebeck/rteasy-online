{"version":3,"sources":["wasm/pkg/index_bg.js","../node_modules/webpack/buildin/harmony-module.js","wasm/pkg/index.js"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","takeObject","ret","dropObject","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachegetUint32Memory0","getUint32Memory0","Uint32Array","getArrayJsValueFromWasm0","result","i","_assertClass","instance","klass","Error","name","setPanicHook","check","retptr","ptr0","len0","r0","build","r1","Simulator","__wrap","build_vhdl","Vhdl","build_signals","Signals","this","__destroy_into_raw","v0","Object","create","prototype","statement","Span","stop_on_breakpoint","StepResult","kind","r2","v1","base","ptr1","len1","r3","ptr2","len2","v2","value","page_nr","address","v3","addr","ptr3","len3","save","arg0","StepResultCondition","module_name","memories_arg","array","passArrayJsValueToWasm0","__wbindgen_string_new","arg1","__wbindgen_number_new","__wbindgen_object_drop_ref","__wbindgen_string_get","x","__wbg_new_693216e109162396","__wbg_stack_0ddaca5d1abfb52f","stack","__wbg_error_09919627ac0992f5","console","error","__wbindgen_throw","exports","originalModule","webpackPolyfill","children","defineProperty","enumerable","get","l"],"mappings":"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","file":"static/js/6.25b527dd.chunk.js","sourcesContent":["import * as wasm from './index_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetUint32Memory0 = null;\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction getArrayJsValueFromWasm0(ptr, len) {\n    const mem = getUint32Memory0();\n    const slice = mem.subarray(ptr / 4, ptr / 4 + len);\n    const result = [];\n    for (let i = 0; i < slice.length; i++) {\n        result.push(takeObject(slice[i]));\n    }\n    return result;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n*/\nexport function setPanicHook() {\n    wasm.setPanicHook();\n}\n\nfunction passArrayJsValueToWasm0(array, malloc) {\n    const ptr = malloc(array.length * 4);\n    const mem = getUint32Memory0();\n    for (let i = 0; i < array.length; i++) {\n        mem[ptr / 4 + i] = addHeapObject(array[i]);\n    }\n    WASM_VECTOR_LEN = array.length;\n    return ptr;\n}\n/**\n* @param {string} code\n*/\nexport function check(code) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.check(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} code\n* @returns {Simulator}\n*/\nexport function build(code) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.build(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Simulator.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} code\n* @returns {Vhdl}\n*/\nexport function build_vhdl(code) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.build_vhdl(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Vhdl.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} code\n* @returns {Signals}\n*/\nexport function build_signals(code) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.build_signals(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Signals.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n*/\nexport class Signals {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Signals.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_signals_free(ptr);\n    }\n    /**\n    * @returns {any[]}\n    */\n    condition_signals() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signals_condition_signals(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any[]}\n    */\n    control_signals() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.signals_control_signals(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class Simulator {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Simulator.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_simulator_free(ptr);\n    }\n    /**\n    */\n    reset() {\n        wasm.simulator_reset(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    cycle_count() {\n        const ret = wasm.simulator_cycle_count(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_finished() {\n        const ret = wasm.simulator_is_finished(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {number} statement\n    * @returns {Span | undefined}\n    */\n    statement_span(statement) {\n        const ret = wasm.simulator_statement_span(this.ptr, statement);\n        return ret === 0 ? undefined : Span.__wrap(ret);\n    }\n    /**\n    * @param {number} statement\n    */\n    add_breakpoint(statement) {\n        wasm.simulator_add_breakpoint(this.ptr, statement);\n    }\n    /**\n    * @param {number} statement\n    */\n    remove_breakpoint(statement) {\n        wasm.simulator_remove_breakpoint(this.ptr, statement);\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    breakpoints() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_breakpoints(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {boolean} stop_on_breakpoint\n    * @returns {StepResult | undefined}\n    */\n    micro_step(stop_on_breakpoint) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_micro_step(retptr, this.ptr, stop_on_breakpoint);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : StepResult.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {boolean} stop_on_breakpoint\n    * @returns {StepResult | undefined}\n    */\n    step(stop_on_breakpoint) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_step(retptr, this.ptr, stop_on_breakpoint);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : StepResult.__wrap(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} kind\n    * @returns {any[]}\n    */\n    registers(kind) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(kind, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.simulator_registers(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {string}\n    */\n    register_value(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.simulator_register_value(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr2, len2);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {string | undefined}\n    */\n    register_value_next(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.simulator_register_value_next(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} value\n    * @param {string} base\n    */\n    write_register(name, value, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.simulator_write_register(retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} kind\n    * @returns {any[]}\n    */\n    buses(kind) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(kind, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.simulator_buses(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v1 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {string}\n    */\n    bus_value(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.simulator_bus_value(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr2, len2);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} value\n    * @param {string} base\n    */\n    write_bus(name, value, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.simulator_write_bus(retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any[]}\n    */\n    register_arrays() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_register_arrays(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {any[] | undefined}\n    */\n    register_array_value_next(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.simulator_register_array_value_next(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 4);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @returns {number}\n    */\n    register_array_page_count(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.simulator_register_array_page_count(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {number} page_nr\n    * @param {string} base\n    * @returns {any[]}\n    */\n    register_array_page(name, page_nr, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.simulator_register_array_page(retptr, this.ptr, ptr0, len0, page_nr, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v2 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {number} idx\n    * @param {string} value\n    * @param {string} base\n    */\n    write_register_array(name, idx, value, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.simulator_write_register_array(retptr, this.ptr, ptr0, len0, idx, ptr1, len1, ptr2, len2);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any[]}\n    */\n    memories() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.simulator_memories(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} base\n    * @returns {any[] | undefined}\n    */\n    memory_value_next(name, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_value_next(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getArrayJsValueFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 4);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @returns {string}\n    */\n    memory_page_count(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page_count(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} page_nr\n    * @returns {string | undefined}\n    */\n    memory_page_prev(name, page_nr) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(page_nr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page_prev(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} page_nr\n    * @returns {string | undefined}\n    */\n    memory_page_next(name, page_nr) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(page_nr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page_next(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} address\n    * @returns {string | undefined}\n    */\n    memory_page_nr_of_address(name, address) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page_nr_of_address(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            let v2;\n            if (r0 !== 0) {\n                v2 = getStringFromWasm0(r0, r1).slice();\n                wasm.__wbindgen_free(r0, r1 * 1);\n            }\n            return v2;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} page_nr\n    * @param {string} base\n    * @returns {any[]}\n    */\n    memory_page(name, page_nr, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(page_nr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            wasm.simulator_memory_page(retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v3 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v3;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} addr\n    * @param {string} value\n    * @param {string} base\n    */\n    write_memory(name, addr, value, base) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(addr, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            const ptr2 = passStringToWasm0(value, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len2 = WASM_VECTOR_LEN;\n            const ptr3 = passStringToWasm0(base, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len3 = WASM_VECTOR_LEN;\n            wasm.simulator_write_memory(retptr, this.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} name\n    * @returns {string}\n    */\n    save_memory(name) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.simulator_save_memory(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} name\n    * @param {string} save\n    */\n    load_memory_from_save(name, save) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(save, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.simulator_load_memory_from_save(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class Span {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Span.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_span_free(ptr);\n    }\n    /**\n    */\n    get start() {\n        const ret = wasm.__wbg_get_span_start(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set start(arg0) {\n        wasm.__wbg_set_span_start(this.ptr, arg0);\n    }\n    /**\n    */\n    get end() {\n        const ret = wasm.__wbg_get_span_end(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set end(arg0) {\n        wasm.__wbg_set_span_end(this.ptr, arg0);\n    }\n}\n/**\n*/\nexport class StepResult {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StepResult.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stepresult_free(ptr);\n    }\n    /**\n    */\n    get statement() {\n        const ret = wasm.__wbg_get_stepresult_statement(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} arg0\n    */\n    set statement(arg0) {\n        wasm.__wbg_set_stepresult_statement(this.ptr, arg0);\n    }\n    /**\n    */\n    get span() {\n        const ret = wasm.__wbg_get_stepresult_span(this.ptr);\n        return Span.__wrap(ret);\n    }\n    /**\n    * @param {Span} arg0\n    */\n    set span(arg0) {\n        _assertClass(arg0, Span);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_stepresult_span(this.ptr, ptr0);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_void() {\n        const ret = wasm.stepresult_is_void(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_condition() {\n        const ret = wasm.stepresult_is_condition(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_pipe() {\n        const ret = wasm.stepresult_is_pipe(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_statement_end() {\n        const ret = wasm.stepresult_is_statement_end(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_breakpoint() {\n        const ret = wasm.stepresult_is_breakpoint(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_assert_error() {\n        const ret = wasm.stepresult_is_assert_error(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {StepResultCondition | undefined}\n    */\n    as_condition() {\n        const ret = wasm.stepresult_as_condition(this.ptr);\n        return ret === 0 ? undefined : StepResultCondition.__wrap(ret);\n    }\n    /**\n    * @returns {any[]}\n    */\n    changed_registers() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stepresult_changed_registers(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any[]}\n    */\n    changed_register_arrays() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stepresult_changed_register_arrays(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {any[]}\n    */\n    changed_memories() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.stepresult_changed_memories(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nexport class StepResultCondition {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StepResultCondition.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_stepresultcondition_free(ptr);\n    }\n    /**\n    */\n    get result() {\n        const ret = wasm.__wbg_get_stepresultcondition_result(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {boolean} arg0\n    */\n    set result(arg0) {\n        wasm.__wbg_set_stepresultcondition_result(this.ptr, arg0);\n    }\n    /**\n    */\n    get span() {\n        const ret = wasm.__wbg_get_stepresultcondition_span(this.ptr);\n        return Span.__wrap(ret);\n    }\n    /**\n    * @param {Span} arg0\n    */\n    set span(arg0) {\n        _assertClass(arg0, Span);\n        var ptr0 = arg0.ptr;\n        arg0.ptr = 0;\n        wasm.__wbg_set_stepresultcondition_span(this.ptr, ptr0);\n    }\n}\n/**\n*/\nexport class Vhdl {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vhdl.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_vhdl_free(ptr);\n    }\n    /**\n    * @returns {any[]}\n    */\n    memories() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.vhdl_memories(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayJsValueFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} module_name\n    * @param {any[]} memories_arg\n    * @returns {string}\n    */\n    render(module_name, memories_arg) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(module_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArrayJsValueToWasm0(memories_arg, wasm.__wbindgen_malloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.vhdl_render(retptr, this.ptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr2 = r0;\n            var len2 = r1;\n            if (r3) {\n                ptr2 = 0; len2 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr2, len2);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(ptr2, len2);\n        }\n    }\n}\n\nexport function __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport function __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nexport function __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_new_693216e109162396() {\n    const ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport function __wbg_stack_0ddaca5d1abfb52f(arg0, arg1) {\n    const ret = getObject(arg1).stack;\n    const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport function __wbg_error_09919627ac0992f5(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport function __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import * as wasm from \"./index_bg.wasm\";\nexport * from \"./index_bg.js\";"],"sourceRoot":""}